name: Bump Version and Update RC File
on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}
      
      - name: Get last version from tag
        id: get_version
        run: |
          $LAST_TAG = git describe --tags --abbrev=0 2>$null
          # Проверяем, что тег содержит корректную версию x.x.x
          if ($LAST_TAG -and $LAST_TAG -match 'v?(\d+\.\d+\.\d+)') {
            $VERSION = $matches[1]
          } else {
            # Если тегов нет или формат некорректный - ищем в RC-файле
            if (Test-Path "Gui_proxy.rc") {
              $content = Get-Content -Path "Gui_proxy.rc" -Raw
              if ($content -match 'VALUE "FileVersion",\s*"(\d+\.\d+\.\d+)"') {
                $VERSION = $matches[1]
              } else {
                $VERSION = "1.37.0"
              }
            } else {
              $VERSION = "1.37.0"
            }
          }
          echo "CURRENT_VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      
      # Остальные шаги без изменений...
      - name: Count changed lines
        id: count_changes
        run: |
          $LAST_TAG = git describe --tags --abbrev=0 2>$null
          if (-not $LAST_TAG -or $LAST_TAG -notmatch '\d+\.\d+\.\d+') { 
            $LAST_TAG = "HEAD~1" 
          } else {
            $LAST_TAG = "${LAST_TAG}^..HEAD"
          }
          
          $DIFF = git diff $LAST_TAG --shortstat
          $INSERTIONS = 0
          $DELETIONS = 0
          
          if ($DIFF -match '(\d+)\s+insertion') { $INSERTIONS = [int]$matches[1] }
          if ($DIFF -match '(\d+)\s+deletion') { $DELETIONS = [int]$matches[1] }
          
          $TOTAL = $INSERTIONS + $DELETIONS
          echo "TOTAL_LINES=$TOTAL" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      
      - name: Get or initialize build number
        id: build_number
        run: |
          $BUILD_FILE = ".build_number"
          
          if (Test-Path $BUILD_FILE) {
            $buildNumber = [int](Get-Content $BUILD_FILE)
          } else {
            $buildNumber = 0
          }
          
          $buildNumber++
          $buildNumber | Set-Content $BUILD_FILE
          
          echo "BUILD_NUMBER=$buildNumber" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      
      - name: Bump version
        id: bump_version
        run: |
          $v = ${{ steps.get_version.outputs.CURRENT_VERSION }} -split '\.'
          $MAJOR = [int]$v[0]
          $MINOR = [int]$v[1]
          $PATCH = [int]$v[2]
          $TOTAL_LINES = [int]${{ steps.count_changes.outputs.TOTAL_LINES }}
          
          if ($TOTAL_LINES -gt 1000) {
            $MAJOR++
            $MINOR = 0
            $PATCH = 0
          } elseif ($TOTAL_LINES -gt 10) {
            $MINOR++
            $PATCH = 0
          } else {
            $PATCH++
          }
          
          $BUILD_NUMBER = ${{ steps.build_number.outputs.BUILD_NUMBER }}
          $NEW_VERSION = "$MAJOR.$MINOR.$PATCH"
          $FULL_VERSION = "$MAJOR.$MINOR.$PATCH.$BUILD_NUMBER"
          
          echo "NEW_VERSION=$NEW_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "FULL_VERSION=$FULL_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      
      - name: Create Gui_proxy.rc if missing
        run: |
          $CURRENT_VERSION = "${{ steps.get_version.outputs.CURRENT_VERSION }}"
          $parts = $CURRENT_VERSION -split '\.'
          $FILEVERSION_RC = "$($parts[0]),$($parts[1]),$($parts[2]),0"
          
          if (-not (Test-Path "Gui_proxy.rc")) {
            $rc = "VERSIONINFO`r`n" +
                  "FILEVERSION $FILEVERSION_RC`r`n" +
                  "PRODUCTVERSION $FILEVERSION_RC`r`n" +
                  "FILEOS 0x4`r`n" +
                  "FILETYPE 1`r`n" +
                  "{" + "`r`n" +
                  "    BLOCK `"StringFileInfo`"`r`n" +
                  "    {" + "`r`n" +
                  "        BLOCK `"040904B0`"`r`n" +
                  "        {" + "`r`n" +
                  "            VALUE `"FileDescription`", `"Gui_proxy Application`"`r`n" +
                  "            VALUE `"ProductName`", `"Gui_proxy`"`r`n" +
                  "            VALUE `"LegalCopyright`", `"Copyright (c) 2024`"`r`n" +
                  "            VALUE `"CompanyName`", `"Your Company`"`r`n" +
                  "            VALUE `"FileVersion`", `"$CURRENT_VERSION`"`r`n" +
                  "            VALUE `"ProductVersion`", `"$CURRENT_VERSION`"`r`n" +
                  "        }" + "`r`n" +
                  "    }" + "`r`n" +
                  "    BLOCK `"VarFileInfo`"`r`n" +
                  "    {" + "`r`n" +
                  "        VALUE `"Translation`", 0x409, 1200`r`n" +
                  "    }" + "`r`n" +
                  "}" + "`r`n"
            
            $rc | Set-Content -Path "Gui_proxy.rc" -Encoding UTF8
            Write-Host "Created new Gui_proxy.rc with version $CURRENT_VERSION"
          }
        shell: pwsh
      
      - name: Update RC file with new version
        run: |
          $NEW_VERSION = "${{ steps.bump_version.outputs.NEW_VERSION }}"
          $FULL_VERSION = "${{ steps.bump_version.outputs.FULL_VERSION }}"
          $parts = $NEW_VERSION -split '\.'
          $FILEVERSION = "$($parts[0]),$($parts[1]),$($parts[2]),0"
          
          $content = Get-Content -Path "Gui_proxy.rc" -Raw
          
          $content = $content -replace 'FILEVERSION \d+,\d+,\d+,\d+', "FILEVERSION $FILEVERSION"
          $content = $content -replace 'PRODUCTVERSION \d+,\d+,\d+,\d+', "PRODUCTVERSION $FILEVERSION"
          $content = $content -replace 'VALUE "FileVersion",\s*"[^"]*"', "VALUE ""FileVersion"", ""$NEW_VERSION"""
          $content = $content -replace 'VALUE "ProductVersion",\s*"[^"]*"', "VALUE ""ProductVersion"", ""$NEW_VERSION"""
          
          $content | Set-Content -Path "Gui_proxy.rc" -Encoding UTF8
          Write-Host "Updated RC file to version $NEW_VERSION (build $FULL_VERSION)"
        shell: pwsh
      
      - name: Update README with version info
        run: |
          $NEW_VERSION = "${{ steps.bump_version.outputs.NEW_VERSION }}"
          $FULL_VERSION = "${{ steps.bump_version.outputs.FULL_VERSION }}"
          $BUILD_NUMBER = "${{ steps.build_number.outputs.BUILD_NUMBER }}"
          $DATE = Get-Date -Format "yyyy-MM-dd"
          
          $CHANGELOG_ENTRY = "## [$NEW_VERSION] - $DATE`n`n"
          
          $TOTAL_LINES = ${{ steps.count_changes.outputs.TOTAL_LINES }}
          $CHANGELOG_ENTRY += "- Обновлено $TOTAL_LINES строк кода`n"
          
          if ($TOTAL_LINES -gt 1000) {
            $CHANGELOG_ENTRY += "- Major release (значительные изменения)`n"
          } elseif ($TOTAL_LINES -gt 10) {
            $CHANGELOG_ENTRY += "- Minor release (новые функции)`n"
          } else {
            $CHANGELOG_ENTRY += "- Patch release (исправления ошибок)`n"
          }
          
          $CHANGELOG_ENTRY += "`nBuild number: $BUILD_NUMBER`n`n---`n`n"
          
          if (Test-Path "README.md") {
            $readme = Get-Content -Path "README.md" -Raw
            
            if ($readme -match '##\s*Changelog') {
              $readme = $readme -replace '(##\s*Changelog)', "$CHANGELOG_ENTRY`$1"
            } 
            elseif ($readme -match '##\s*Version History') {
              $readme = $readme -replace '(##\s*Version History)', "$CHANGELOG_ENTRY`$1"
            }
            else {
              $readme = $CHANGELOG_ENTRY + $readme
            }
            
            $readme | Set-Content -Path "README.md" -Encoding UTF8
            Write-Host "Updated README.md with version info"
          }
          else {
            $newReadme = "# Gui_proxy`n`nApplication description`n`n$CHANGELOG_ENTRY"
            $newReadme | Set-Content -Path "README.md" -Encoding UTF8
            Write-Host "Created new README.md with version info"
          }
        shell: pwsh
      
      - name: Commit version changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add Gui_proxy.rc .build_number README.md
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "chore: version bump to v${{ steps.bump_version.outputs.NEW_VERSION }} (build ${{ steps.build_number.outputs.BUILD_NUMBER }})"
            git push origin main
          else
            echo "No changes to commit"
          fi
        shell: bash
