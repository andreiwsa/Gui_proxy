name: Bump Version and Update RC File
on:
  push:
    branches:
      - main
jobs:
  bump-version:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get last version from tag
        id: get_version
        run: >
          $LAST_TAG = git describe --tags --abbrev=0 2>$null

          if (-not $LAST_TAG) { $LAST_TAG = "v1.37.0" }

          $VERSION = $LAST_TAG -replace '^v', ''

          echo "CURRENT_VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      - name: Count changed lines
        id: count_changes
        run: >
          $LAST_TAG = git describe --tags --abbrev=0 2>$null

          if (-not $LAST_TAG) { 
            $LAST_TAG = "HEAD~1" 
          } else {
            $LAST_TAG = "${LAST_TAG}^..HEAD"
          }


          $DIFF = git diff $LAST_TAG --shortstat

          $INSERTIONS = 0

          $DELETIONS = 0


          if ($DIFF -match '(\d+)\s+insertion') { $INSERTIONS = [int]$matches[1] }

          if ($DIFF -match '(\d+)\s+deletion') { $DELETIONS = [int]$matches[1] }


          $TOTAL = $INSERTIONS + $DELETIONS

          echo "TOTAL_LINES=$TOTAL" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      - name: Bump version
        id: bump_version
        run: >
          $v = ${{ steps.get_version.outputs.CURRENT_VERSION }} -split '\.'

          $MAJOR = [int]$v[0]

          $MINOR = [int]$v[1]

          $PATCH = [int]$v[2]

          $TOTAL_LINES = [int]${{ steps.count_changes.outputs.TOTAL_LINES }}


          if ($TOTAL_LINES -gt 1000) {
            $MAJOR++
            $MINOR = 0
            $PATCH = 0
          } elseif ($TOTAL_LINES -gt 10) {
            $MINOR++
            $PATCH = 0
          } else {
            $PATCH++
          }


          $NEW_VERSION = "$MAJOR.$MINOR.$PATCH"

          echo "NEW_VERSION=$NEW_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh
      - name: Create Gui_proxy.rc if missing
        run: |
          $CURRENT_VERSION = "${{ steps.get_version.outputs.CURRENT_VERSION }}"
          $parts = $CURRENT_VERSION -split '\.'
          $FILEVERSION_RC = "$($parts[0]),$($parts[1]),$($parts[2]),0"

          if (-not (Test-Path "Gui_proxy.rc")) {
            $rc = "VERSIONINFO`r`n" +
                  "FILEVERSION $FILEVERSION_RC`r`n" +
                  "PRODUCTVERSION $FILEVERSION_RC`r`n" +
                  "FILEOS 0x4`r`n" +
                  "FILETYPE 1`r`n" +
                  "{" + "`r`n" +
                  "    BLOCK `"StringFileInfo`"`r`n" +
                  "    {" + "`r`n" +
                  "        BLOCK `"040904B0`"`r`n" +
                  "        {" + "`r`n" +
                  "            VALUE `"FileDescription`", `"Gui_proxy Application`"`r`n" +
                  "            VALUE `"ProductName`", `"Gui_proxy`"`r`n" +
                  "            VALUE `"LegalCopyright`", `"Copyright (c) 2025`"`r`n" +
                  "            VALUE `"CompanyName`", `"YC`"`r`n" +
                  "            VALUE `"FileVersion`", `"$CURRENT_VERSION`"`r`n" +
                  "            VALUE `"ProductVersion`", `"$CURRENT_VERSION`"`r`n" +
                  "        }" + "`r`n" +
                  "    }" + "`r`n" +
                  "    BLOCK `"VarFileInfo`"`r`n" +
                  "    {" + "`r`n" +
                  "        VALUE `"Translation`", 0x409, 1200`r`n" +
                  "    }" + "`r`n" +
                  "}" + "`r`n"

            $rc | Set-Content -Path "Gui_proxy.rc" -Encoding UTF8
            Write-Host "Created new Gui_proxy.rc with version $CURRENT_VERSION"
          }
        shell: pwsh
      - name: Update RC file with new version
        run: >
          $NEW_VERSION = "${{ steps.bump_version.outputs.NEW_VERSION }}"

          $parts = $NEW_VERSION -split '\.'

          $FILEVERSION = "$($parts[0]),$($parts[1]),$($parts[2]),0"


          $content = Get-Content -Path "Gui_proxy.rc" -Raw


          # Update numeric version formats (comma-separated)

          $content = $content -replace 'FILEVERSION \d+,\d+,\d+,\d+', "FILEVERSION $FILEVERSION"

          $content = $content -replace 'PRODUCTVERSION \d+,\d+,\d+,\d+', "PRODUCTVERSION $FILEVERSION"


          # Update string version formats (quoted)

          $content = $content -replace 'VALUE "FileVersion", "[^"]*"', "VALUE ""FileVersion"", ""$NEW_VERSION"""

          $content = $content -replace 'VALUE "ProductVersion", "[^"]*"', "VALUE ""ProductVersion"", ""$NEW_VERSION"""


          $content | Set-Content -Path "Gui_proxy.rc" -Encoding UTF8

          Write-Host "Updated RC file to version $NEW_VERSION"
        shell: pwsh
      - name: Commit and tag new version
        run: >
          git config user.name "github-actions[bot]"

          git config user.email "github-actions[bot]@users.noreply.github.com"


          git add Gui_proxy.rc

          git commit -m "chore: version bump to v${{ steps.bump_version.outputs.NEW_VERSION }}" || exit 0


          git tag "v${{ steps.bump_version.outputs.NEW_VERSION }}"

          git push origin main --force-with-lease

          git push origin "v${{ steps.bump_version.outputs.NEW_VERSION }}"
        shell: bash
