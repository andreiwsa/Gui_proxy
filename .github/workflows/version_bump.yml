name: Bump Version and Update RC File

on:
  push:
    branches: [main]

jobs:
  bump-version:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get last version from tag
        id: get_version
        run: |
          $LAST_TAG = git describe --tags --abbrev=0 2>$null
          if (!$LAST_TAG) { $LAST_TAG = "v1.37.0" }
          $VERSION = $LAST_TAG -replace '^v', ''
          echo "CURRENT_VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Count changed lines
        id: count_changes
        run: |
          $LAST_TAG = git describe --tags --abbrev=0 2>$null
          if (!$LAST_TAG) { $LAST_TAG = "HEAD~1" }
          $DIFF = git diff $LAST_TAG --shortstat | Out-String
          $MATCH = [regex]::Match($DIFF, '(\d+) insertion.*?(\d+) deletion')
          $INSERTIONS = 0
          $DELETIONS = 0
          if ($MATCH.Success) {
            $INSERTIONS = [int]$MATCH.Groups[1].Value
            $DELETIONS = [int]$MATCH.Groups[2].Value
          }
          $TOTAL = $INSERTIONS + $DELETIONS
          echo "TOTAL_LINES=$TOTAL" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Bump version
        id: bump_version
        run: |
          $v = ${{ steps.get_version.outputs.CURRENT_VERSION }} -split '\.'
          $MAJOR = [int]$v[0]
          $MINOR = [int]$v[1]
          $PATCH = [int]$v[2]
          $TOTAL_LINES = [int]${{ steps.count_changes.outputs.TOTAL_LINES }}

          if ($TOTAL_LINES -gt 1000) {
            $MAJOR++
            $MINOR = 0
            $PATCH = 0
          } elseif ($TOTAL_LINES -gt 10) {
            $MINOR++
            $PATCH = 0
          } else {
            $PATCH++
          }

          $NEW_VERSION = "$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Create Gui_proxy.rc if missing
        run: |
          if (-not (Test-Path "Gui_proxy.rc")) {
            $rc = @"
1 VERSIONINFO
FILEVERSION 1,37,0,0
PRODUCTVERSION 1,37,0,0
FILEOS 0x4
FILETYPE 1
{
    BLOCK "StringFileInfo"
    {
        BLOCK "040904B0"
        {
            VALUE "FileDescription", "Gui_proxy Application"
            VALUE "ProductName", "Gui_proxy"
            VALUE "LegalCopyright", "Copyright (c) 2024"
            VALUE "CompanyName", "Your Company"
            VALUE "FileVersion", "1.37.0"
            VALUE "ProductVersion", "1.37.0"
        }
    }
    BLOCK "VarFileInfo"
    {
        VALUE "Translation", 0x409, 1200
    }
}
"@
            $rc | Set-Content -Path "Gui_proxy.rc" -Encoding UTF8
          }
        shell: pwsh

      - name: Update RC file with new version
        run: |
          $NEW_VERSION = "${{ steps.bump_version.outputs.NEW_VERSION }}"
          $parts = $NEW_VERSION -split '\.'
          $FILEVERSION = "$($parts[0]),$($parts[1]),$($parts[2]),0"

          $content = Get-Content -Path "Gui_proxy.rc" -Raw
          $content = $content -replace 'FILEVERSION \d+,\d+,\d+,\d+', "FILEVERSION $FILEVERSION"
          $content = $content -replace 'PRODUCTVERSION \d+,\d+,\d+,\d+', "PRODUCTVERSION $FILEVERSION"
          $content = $content -replace 'VALUE "FileVersion", "[^"]*"', "VALUE `"FileVersion`", `"$NEW_VERSION`""
          $content = $content -replace 'VALUE "ProductVersion", "[^"]*"', "VALUE `"ProductVersion`", `"$NEW_VERSION`""

          $content | Set-Content -Path "Gui_proxy.rc" -Encoding UTF8
        shell: pwsh

      - name: Commit and tag new version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add Gui_proxy.rc
          git commit -m "chore: version bump to v${{ steps.bump_version.outputs.NEW_VERSION }}" || exit 0
          
          git tag "v${{ steps.bump_version.outputs.NEW_VERSION }}"
          git push origin main
          git push origin "v${{ steps.bump_version.outputs.NEW_VERSION }}"
        shell: bash
